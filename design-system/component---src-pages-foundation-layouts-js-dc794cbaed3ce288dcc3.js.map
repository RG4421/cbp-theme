{"version":3,"sources":["webpack:///./src/images/layout-grid-xl.jpg","webpack:///./src/images/layout-grid-small.jpg","webpack:///./src/pages/foundation/layouts.js","webpack:///./src/images/layout-grid-large.jpg","webpack:///./src/images/layout-spacing-system.jpg","webpack:///./src/images/layout-grid-medium.jpg"],"names":["module","exports","LayoutPage","title","contentType","className","id","src","gridSmall","style","height","gridMed","gridLg","gridXL","spacingSystem","code","language","width","paddingBottom","scrolling","frameborder","allowtransparency","allowfullscreen","loading","href","position","float","right","role","aria-level"],"mappings":"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","file":"component---src-pages-foundation-layouts-js-dc794cbaed3ce288dcc3.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/layout-grid-xl-74d65047147df3e23f9e59606b8d9bf9.jpg\";","module.exports = __webpack_public_path__ + \"static/layout-grid-small-fed04bcbdec79c47cd61d6cd4b0d5b1c.jpg\";","import React from \"react\"\nimport Layout from \"../../ds-components/layout/layout\"\nimport ContentHeader from \"../../ds-components/content-header/contentHeader\"\nimport SEO from \"../../ds-components/seo\"\nimport gridSmall from \"../../images/layout-grid-small.jpg\"\nimport gridMed from \"../../images/layout-grid-medium.jpg\"\nimport gridLg from \"../../images/layout-grid-large.jpg\"\nimport gridXL from \"../../images/layout-grid-xl.jpg\"\nimport spacingSystem from \"../../images/layout-spacing-system.jpg\"\nimport CodeSnippet from \"../../ds-components/codeSnippet/codeSnippet\"\n\nconst LayoutPage = () => (\n  <Layout>\n    <SEO title=\"CBP Design System | Layouts\" />\n    <ContentHeader title=\"Layouts\" contentType=\"foundation\" />\n\n    <article className=\"spacing-wrapper\">\n      <section id=\"Basics\">\n        <h2 className=\"cbp-heading-2\">Creating Hierarchy with Positioning</h2>\n        <p className=\"cbp-body\">\n          Spacing, Grid, and Layout define how we arrange elements on the page\n          in a way that is easy to understand, is representative of the\n          hierarchy of the information, and has a consistent rhythm.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">Nuggets of Knowledge</h2>\n        <div className=\"content\">\n          <ul>\n            <li>\n              Use the spacing variables prescribed in the design system. There\n              are always exceptions to the rule, but modifications should be\n              avoided if at all possible. Remember that modifying the grid\n              settings can have a compounding mathematical effect that can cause\n              a cascading set of failures across the design system.\n            </li>\n            <li>\n              Containers on your page should be aligned to the CBP Layout Grid\n              except in very specific circumstances (described in this guide).\n            </li>\n            <li>\n              Elements on the page should be aligned to the layout grid, does\n              not mean that their dimensions must be defined by it.\n            </li>\n            <li>\n              The minimum space between separate containers on the page is\n              $spacing-regular (20px), except when crossing columns, in which\n              case the gutter will define that spacing.\n            </li>\n            <li>\n              You should test your layouts against each of the 4 main break\n              points and prescribe changes in layout to match each if necessary.\n            </li>\n            <li>\n              CBP Applications and sites are responsive. Functionality that is\n              accessible on the desktop should also be available on other\n              devices accessing the service.\n            </li>\n            <li>\n              Do not adjust the CBP Layout Grid settings, including most notably\n              gutter and margin sizing.\n            </li>\n            <li>\n              The body element in your HTML file should have the class\n              .cbp-layout-grid applied.\n            </li>\n            <li>\n              Please only use the spacing variables prescribed in the design\n              system. There are always exceptions to the rule, but this should\n              be avoided if at all possible.\n            </li>\n            <li>\n              Containers on your page should be aligned to the CBP Layout Grid\n              except in very narrow circumstances (described in this guide).\n            </li>\n            <li>\n              Just because elements on the page should be aligned to the layout\n              grid does not mean that their dimensions must be defined by it\n              too.\n            </li>\n            <li>\n              The minimum space between separate containers on the page is\n              $spacing-regular (20px), except when crossing columns in which\n              case the gutter will define that spacing.\n            </li>\n            <li>\n              You should test your layouts against each of the 4 main break\n              points and prescribe changes in layout to match each if necessary.\n            </li>\n            <li>\n              CBP Applications and sites are responsive. Functionality that is\n              accessible on the desktop should also be available on other\n              devices accessing the service.\n            </li>\n            <li>\n              Do not adjust the CBP Layout Grid settings, including most notably\n              gutter and margin sizing.\n            </li>\n          </ul>\n        </div>\n\n        <h2 className=\"cbp-heading-2\">The Layout Grid</h2>\n        <p className=\"cbp-body\">\n          The word grid is a bit overused when it comes to development. In this\n          specific instance the \"Layout Grid\" we are referring to is the\n          skeleton on which different elements are placed to give the overall\n          page structure. It's made up of 3 main parts: Columns, Gutters, and\n          Margins. The CBP Design System supports 4 major breakpoints: small,\n          medium, large, and extra-large. Major breakpoints are the viewport\n          width points that are aligned to the most common device resolutions\n          (logical resolution not device screen resolution). From one breakpoint\n          to another the grid may change the number of columns or the values\n          associated with gutter or margin width. From a horizontal alignment\n          perspective, your content should align to this grid. An exception to\n          this may include fluid dashboards where dividing up the page via\n          percentages is more effective. Regardless of which method is used, the\n          grid margin must be preserved. In general, you will notice that the\n          size of the gutters and margins stays static while the columns grow\n          and shrink to fit the remainder of the viewport width at each major\n          breakpoint.\n        </p>\n        <p className=\"cbp-body\">\n          <strong>NOTE: </strong>At a later point native mobile versions of the\n          CBP Design System will swap these pixel values for that ecosystem's\n          particular unit of measurement. For iOS this means pt(s) and for\n          Android, dp(s).\n        </p>\n\n        <h3 className=\"cbp-heading-3\">Major Breakpoints</h3>\n        <h4 className=\"cbp-heading-4\">\n          Small Break Point {`<`}599px 4 column 20px margin / 16px gutter\n        </h4>\n        <p className=\"cbp-body\">\n          This will cover the gamut of mobile devices currently in the wild.\n          Margins are slightly larger than the gutters. The vast majority of\n          layout containers at this breakpoint will be 4 columns wide and\n          effectively be a single column layout. It should be clear that\n          multiple columns of text are unacceptable at this breakpoint to keep\n          legibility in mind. Learn more about major breakpoints here.\n        </p>\n\n        <figure>\n          <img src={gridSmall} style={{ height: \"250px\" }}></img>\n        </figure>\n\n        <h4 className=\"cbp-heading-4\">\n          Medium Break Point 600-1023px 8 column 32px margin / 28px gutter{\" \"}\n        </h4>\n        <p className=\"cbp-body\">\n          This will encapsulate most of the large mobile form factors through\n          most vertical tablet range of viewports, stopping just shy of the\n          default px width of most small laptops. The gutters are sized to allow\n          multiple columns of text (2rem), but the 45-75 character range for\n          line length should be maintained for long blocks of text. Learn more\n          about major breakpoints here.\n        </p>\n        <figure>\n          <img src={gridMed} style={{ height: \"250px\" }}></img>\n        </figure>\n\n        <h4 className=\"cbp-heading-4\">\n          Large Break Point 1024-1439px 12 column 32px margin / 28px gutter\n        </h4>\n        <p className=\"cbp-body\">\n          This will cover our landscape orientation on tablets as well as a\n          range of small laptop and desktop viewports. Learn more about major\n          breakpoints here.\n        </p>\n        <figure>\n          <img src={gridLg} style={{ height: \"250px\" }}></img>\n        </figure>\n\n        <h4 className=\"cbp-heading-4\">\n          Extra Large Break Point {`<`}1440px 12 column 44px margins / 28px\n          gutter\n        </h4>\n        <p className=\"cbp-body\">\n          This will cover the range of desktops and displays on the larger end\n          of the spectrum. Learn more about major breakpoints here.\n        </p>\n        <figure>\n          <img src={gridXL} style={{ height: \"250px\" }}></img>\n        </figure>\n\n        <h3 className=\"cbp-heading-3\">Spacing System</h3>\n        <p className=\"cbp-body\">\n          When prescribing the space between containers, or elements within\n          containers, you should use the following spacing classes.{\" \"}\n          <strong>\n            All classes are based on the 4px baseline grid. You should not need\n            to create custom classes.\n          </strong>{\" \"}\n          These spacing classes can be used directly on properties like padding\n          and margin to help define spatial relationships. Keep in mind which\n          classes you choose will inform users to what information is related to\n          another element. The smaller the space, the more closely related it\n          is. Classes are not responsive, meaning they do not automatically\n          change from one major breakpoint to another. You should test your\n          layouts at each major breakpoint to see if one variable should be\n          substituted at one breakpoint for another.\n        </p>\n\n        <p className=\"cbp-body\">\n          <strong>NOTE: </strong>At a later point native mobile versions of the\n          CBP Design System will swap these pixel values for that ecosystem's\n          particular unit of measurement. For iOS this means pt(s) and for\n          Android, dp(s).\n        </p>\n\n        <figure>\n          <img src={spacingSystem} style={{ height: \"400px\" }}></img>\n        </figure>\n\n        <CodeSnippet\n          code={`$cbp-spacing-micro: 8px\n$cbp-spacing-xsmall: 12px\n$cbp-spacing-small: 16px\n$cbp-spacing-regular: 20px\n$cbp-spacing-large: 40px\n$cbp-spacing-xlarge: 80px`}\n          language={\"language-scss\"}\n        />\n\n        <h3 className=\"cbp-heading-3\">Spacing Component Classes</h3>\n        <p className=\"cbp-body\">\n          In order to speed up development time, the CBP Design System utilizes\n          classes that allow you to quickly apply spacing to elements that align\n          to the main spacing philosophies. There are basically 5 main spacing\n          philosophies:\n        </p>\n\n        <div className=\"content\">\n          <ul>\n            <li>Square Inset</li>\n            <li>Squish Inset</li>\n            <li>Stretch Inset</li>\n            <li>Stack</li>\n            <li>Inline</li>\n          </ul>\n        </div>\n\n        <h4 className=\"cbp-heading-4\">\n          Square Inset (Relationship of parent container to contained child\n          elements)\n        </h4>\n        <p className=\"cbp-body\">\n          This spacing style applies a constant px value around the interior of\n          the component container to align elements to. These classes apply\n          spacing variables evenly to the padding property.\n        </p>\n\n        <iframe\n          height=\"288\"\n          style={{ width: \"100%\", paddingBottom: \"2rem\" }}\n          scrolling=\"no\"\n          title=\"Layouts- Square Inset\"\n          src=\"https://codepen.io/KtowneCreative/embed/jObBYQr?height=288&theme-id=light&default-tab=css,result\"\n          frameborder=\"no\"\n          allowtransparency=\"true\"\n          allowfullscreen=\"true\"\n          loading=\"lazy\"\n        >\n          See the Pen{\" \"}\n          <a href=\"https://codepen.io/KtowneCreative/pen/jObBYQr\">\n            Layouts- Square Inset\n          </a>{\" \"}\n          by Creative Services (\n          <a href=\"https://codepen.io/KtowneCreative\">@KtowneCreative</a>) on{\" \"}\n          <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n\n        <h4 className=\"cbp-heading-4\">\n          Squish Inset (relationship of parent container to contained child\n          elements)\n        </h4>\n        <p className=\"cbp-body\">\n          This style allows for asymmetrical spacing with the vertical spacing\n          being smaller than the horizontal spacing. In these classes we apply a\n          spacing variable to top and bottom padding, then assign the next\n          variable up to the left and right padding.\n        </p>\n\n        <iframe\n          height=\"265\"\n          style={{ width: \"100%\", paddingBottom: \"2rem\" }}\n          scrolling=\"no\"\n          title=\"Layouts- Squish Inset\"\n          src=\"https://codepen.io/KtowneCreative/embed/ExVXxeY?height=265&theme-id=light&default-tab=css,result\"\n          frameborder=\"no\"\n          allowtransparency=\"true\"\n          allowfullscreen=\"true\"\n          loading=\"lazy\"\n        >\n          See the Pen{\" \"}\n          <a href=\"https://codepen.io/KtowneCreative/pen/ExVXxeY\">\n            Layouts- Squish Inset\n          </a>{\" \"}\n          by Creative Services (\n          <a href=\"https://codepen.io/KtowneCreative\">@KtowneCreative</a>) on{\" \"}\n          <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n\n        <h4 className=\"cbp-heading-4\">\n          Stretch Inset (relationship of parent container to contained child\n          elements)\n        </h4>\n        <p className=\"cbp-body\">\n          Similar to squish inset, except it is the converse of the concept, in\n          this instance the vertical value is greater than the horizontal. In\n          these classes we apply a spacing variable to the left and right\n          padding, then apply the next level up to the top and bottom padding.\n        </p>\n\n        <iframe\n          height=\"265\"\n          style={{ width: \"100%\", paddingBottom: \"2rem\" }}\n          scrolling=\"no\"\n          title=\"Layouts- Stretch Inset\"\n          src=\"https://codepen.io/KtowneCreative/embed/BaoZKYN?height=265&theme-id=light&default-tab=css,result\"\n          frameborder=\"no\"\n          allowtransparency=\"true\"\n          allowfullscreen=\"true\"\n          loading=\"lazy\"\n        >\n          See the Pen{\" \"}\n          <a href=\"https://codepen.io/KtowneCreative/pen/BaoZKYN\">\n            Layouts- Stretch Inset\n          </a>{\" \"}\n          by Creative Services (\n          <a href=\"https://codepen.io/KtowneCreative\">@KtowneCreative</a>) on{\" \"}\n          <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n\n        <h4 className=\"cbp-heading-4\">\n          Stack (vertical relationship between individual elements within a\n          contain or between containers)\n        </h4>\n        <p className=\"cbp-body\">\n          The stack philosophy defines the vertical spacing values associated\n          between elements or between containers themselves. It does not affect\n          spacing on the horizontal axis. These classes only apply padding to\n          the bottom of the element or container.\n        </p>\n\n        <iframe\n          height=\"265\"\n          style={{ width: \"100%\", paddingBottom: \"2rem\" }}\n          scrolling=\"no\"\n          title=\"Layouts- Stack \"\n          src=\"https://codepen.io/KtowneCreative/embed/VwvWBNj?height=265&theme-id=light&default-tab=css,result\"\n          frameborder=\"no\"\n          allowtransparency=\"true\"\n          allowfullscreen=\"true\"\n          loading=\"lazy\"\n        >\n          See the Pen{\" \"}\n          <a href=\"https://codepen.io/KtowneCreative/pen/VwvWBNj\">\n            Layouts- Stack{\" \"}\n          </a>{\" \"}\n          by Creative Services (\n          <a href=\"https://codepen.io/KtowneCreative\">@KtowneCreative</a>) on{\" \"}\n          <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n\n        <h4 className=\"cbp-heading-4\">\n          Inline (horizontal relationship between individual elements)\n        </h4>\n        <p className=\"cbp-body\">\n          Inline is similar to stack except on the horizontal axis. This is an\n          important concept for understanding responsive design, as this\n          assigned or minimum space will dictate when elements will wrap or\n          reflow. These classes apply padding only on the right.{\" \"}\n          <strong>\n            <em>THIS DOES NOT REPLACE THE GUTTER. </em>\n          </strong>\n          When spacing containers on the horizontal axis you should use the\n          layout grid, not inline spacing to separate them.\n        </p>\n\n        <iframe\n          height=\"265\"\n          style={{ width: \"100%\", paddingBottom: \"2rem\" }}\n          scrolling=\"no\"\n          title=\"Layouts- Inline\"\n          src=\"https://codepen.io/KtowneCreative/embed/qBOjMbZ?height=265&theme-id=light&default-tab=css,result\"\n          frameborder=\"no\"\n          allowtransparency=\"true\"\n          allowfullscreen=\"true\"\n          loading=\"lazy\"\n        >\n          See the Pen{\" \"}\n          <a href=\"https://codepen.io/KtowneCreative/pen/qBOjMbZ\">\n            Layouts- Inline\n          </a>{\" \"}\n          by Creative Services (\n          <a href=\"https://codepen.io/KtowneCreative\">@KtowneCreative</a>) on{\" \"}\n          <a href=\"https://codepen.io\">CodePen</a>.\n        </iframe>\n      </section>\n\n      <section id=\"Research & References\">\n        <h2 className=\"cbp-heading-2\">\n          A Strong Spine{\" \"}\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n        <p className=\"cbp-body\">\n          When combined with our typographic system, our approach to layout\n          (layout, grid, and spacing) creates the backbone upon which all of the\n          CBP Design System is built. The arrangement of content on the page is\n          just as important as the content itself. Placement, size, and spatial\n          relationships give the user context clues about the order in which\n          content should be consumed, and its overall affiliation with the other\n          information on the page.\n        </p>\n        <h2 className=\"cbp-heading-2\">Layout Grid</h2>\n        <p className=\"cbp-body\">\n          With an atomic design methodology in mind, layout has varying levels\n          of complexity. At the most fundamental level the \"Layout Grid\"\n          provides the cadence that establishes our horizontal rhythm. When\n          paired with the \"Baseline Grid\" established in our typographic system,\n          we have a consistent method of aligning elements on the page. This\n          simplifies design decisions and speeds up the development process.\n        </p>\n        <h3 className=\"cbp-heading-3\">\n          How is this different from other grids?\n        </h3>\n        <p className=\"cbp-body\">\n          In this specific instance the \"Layout Grid\" we are referring to is the\n          skeleton on which different elements are placed to give the overall\n          page structure. It's made up of 3 main parts: Columns, Gutters, and\n          Margins. The layout grid is used to establish horizontal rhythm on the\n          page. Because we can't guarantee what the viewport width our users\n          will be experiencing our products with, this grid must be inherently\n          flexible. This is unlike the \"Baseline Grid\" where we can define a\n          explicit grid in 4px increments.\n        </p>\n        <h3 className=\"cbp-heading-3\">\n          Different Kinds of Layout Grids for Different Purposes\n        </h3>\n        <p className=\"cbp-body\">\n          There are few different kinds of layout grids. Fluid grids display\n          their content in terms of ratios. Each element's width is expressed as\n          a percentage or fraction of the overall viewport width usually\n          expressed in % or FR's (fractions). To make these types of layouts\n          work everything must scale, borders, type, everything. This is not\n          ideal for the type of products we build at CBP. Fixed grids display\n          their content at a set width and the margins flex to absorb the extra\n          space. This is how most sites were built in the early days of the web,\n          but doesn't fit our needs today. Hybrid or Responsive grids have\n          aspects of both fixed and fluid grids. The margin and gutters are\n          represented as static values and the columns resize fluidly to fill in\n          the rest of the space. Responsive grids also adjust these settings\n          with media queries on the viewport width to provide more appropriate\n          options. This is what most modern products utilize and best serves the\n          majority of the products CBP produces.\n        </p>\n        {/* @TODO: insert anatomy of columns, margins, gutters */}\n        <p className=\"cbp-body\">\n          <span role=\"heading\" aria-level=\"4\">\n            <strong>Columns- </strong>\n          </span>\n          These are the vertical bars that all content on the page is aligned\n          to. Columns create horizontal hierarchy on the page by standardizing\n          the starting and stopping points to which content is aligned. The\n          number of columns present is dictated by what breakpoint the viewport\n          falls within. The larger the viewport, the more columns present. The\n          width of columns is flexible depending on the remaining available\n          space after margins and gutters have been allocated.\n        </p>\n\n        <p className=\"cbp-body\">\n          <span role=\"heading\" aria-level=\"4\">\n            <strong>Margins- </strong>\n          </span>\n          This is the space on the far left and right of the page that creates\n          separation between page content the edge of the viewport (either\n          browser window or device edge). Margins have a slightly heavier lift\n          than gutters. Creating a distinction between the viewport and the\n          content requires more negative space in order to help the user's eye\n          properly focus.\n        </p>\n\n        <p className=\"cbp-body\">\n          <span role=\"heading\" aria-level=\"4\">\n            <strong>Gutters- </strong>\n          </span>\n          This is the space between columns. There is a minimum value that is\n          directly tied to the REM value. This value needs to be at a minimum\n          2REM. Why? Because 1REM would effectively be the space between two\n          words (provided text is not justified which it shouldn't be). So what\n          if you had two columns of text directly next to each other? The user\n          would read across the columns. In the case of the CBP DS the REM value\n          = 14px x2=28px. This is the setting for gutters in all of the major\n          breakpoints aside from \"small\" because at this effective size there\n          should only be one column of text, eliminating the issue of columns\n          running together.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">\n          Major Breakpoints\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n\n        {/* @TODO: implement image overview of breakpoints with devices in use */}\n\n        <p className=\"cbp-body\">\n          In order for our content to adapt to the screen that our users are\n          viewing it through, we must adjust how our content is laid out across\n          this spectrum of widths. We assign different values to our grid\n          settings to adjust for the width of the viewport via media queries (if\n          viewport width is {\"<\"} XXpx then etc.). These boundaries created by\n          the media queries are what we call major breakpoints. For the sake of\n          standardization and to speed up development decisions, the CBP Design\n          System contains 4 major breakpoints whose width is determined by\n          common device and viewport width values. Why 4? You don't want to have\n          too many major breakpoints because it creates a lot of unnecessary\n          work to keep your layout working across them. You also don't want too\n          few because then your layouts will break when moving across the\n          spectrum of devices. The \"small\" breakpoint encompasses the vast\n          majority of smart phones (portrait orientation). \"Medium\" fits most of\n          our tablets (portrait orientation) and \"phablets.\" The \"large\"\n          breakpoint works with tablets (landscape orientation), laptops, and\n          small desktop screens. Finally the \"extra large\" breakpoint works with\n          large desktops and wall mounted displays like TVs. See the full\n          details on these breakpoints in the \"Basics\" tab at the top of this\n          page.\n        </p>\n\n        <h3 className=\"cbp-heading-3\">Responsive Design</h3>\n        {/* @TODO: add image of dos and don'ts */}\n        <p className=\"cbp-body\">\n          CBP applications and websites should be able to accommodate a range of\n          devices and viewport widths. As such, functionality should not be\n          removed at certain breakpoints just because \"it doesn't fit.\" If a\n          piece of information seems like it doesn't matter for smaller form\n          factors perhaps you should think on whether it should be present at\n          any form factor. Consider your user and how they will interact with\n          your product in different settings. Elements should reflow and\n          sometime change their form to match the environment they are being\n          displayed in, but keep equitable access to functionality\n        </p>\n\n        <h4 className=\"cbp-heading-4\">Responsive Testing</h4>\n        <p className=\"cbp-body\">\n          What this comes down to is testing. Whether you prescribe to \"mobile\n          first\" design or not, you need to test your layouts against all 4\n          major breakpoints to see where your layouts \"break\" and need\n          adjustment. In most cases this means that a container will have to\n          \"reflow\" to the next \"row\". In some cases however, this will mean that\n          the element you're working with will have to change form to fit at\n          that width\n        </p>\n\n        <h4 className=\"cbp-heading-4\">Container Reflow</h4>\n        <p className=\"cbp-body\">\n          In general, inside of a breakpoint containers flex in both directions\n          to stay aligned to their assigned columns laterally and vertically\n          stretch to fit its content. Sometimes within a break point, and\n          especially between break points, content may need to switch how many\n          columns are occupied. It may also have to change its overall\n          arrangement to fit the new viewport size.\n        </p>\n\n        <h4 className=\"cbp-heading-4\">Intra-Container Reflow</h4>\n        <p className=\"cbp-body\">\n          Within components, whether or not something is fluid in the horizontal\n          or vertical axis can be dependent on the component itself. Some\n          components will actually need to refactor their form rather than\n          simply adjust how many columns it occupies. For example, the\n          application the header can have a variety of content inside it.\n          Obviously, there are minimum spacing requirement between elements\n          inside the component. As the viewport shrinks there is a point where\n          there is no longer room to support the content with the minimum\n          spacing required, and this particular component needs to have a fixed\n          height. So what do you do? It will have to change form and become\n          something that fits that form factor. This will not be able to be\n          achieved by querying the viewport width and will instead have to focus\n          on the exact point where content can no longer support its intended\n          width. Data tables, certain visualizations, other other complicated\n          components commonly are in need of alternate forms on smaller form\n          factors.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">\n          UI Regions\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n        <p className=\"cbp-body\">\n          A layout is made up of several UI regions, with the CBP Design System\n          this translates to the universal and app headers and the main body of\n          the page. There may be other persistent regions based off of different\n          layout archetypes. UI regions should be consistent across devices,\n          while adapting to different breakpoints of different screen sizes.\n        </p>\n        <p className=\"cbp-body\">\n          To increase familiarity across devices, UI elements designed for\n          desktop should be organized in a way that’s consistent with the mobile\n          UI.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">How our Grids are Set Up</h2>\n        <p className=\"cbp-body\">\n          The Layout Grid breakpoints are set up via a set of 4 media queries\n          using \"CSS Grids.\" Yes, you heard that correct, this is another type\n          of grid. CSS grids is a CSS module of properties used to solve layout\n          issues. Unlike \"Flexbox\" which works in one dimension (laterally), CSS\n          Grids work in 2 dimensions (it also plays nicely with Flexbox). It's a\n          lot like working with tables.\n        </p>\n        <p className=\"cbp-body\">\n          Because your application's layout is not necessarily something that\n          can be made universal, these settings will need to be added to your\n          custom css file. You can either copy these settings from the example\n          below or download the sample custom css file from the downloads page.\n          Or as always you can use one our \"Starter Applications\" to begin work\n          on your project and not worry about all this rigamarole.\n        </p>\n\n        {/* @TODO: add code example of css-grid */}\n        <h3 className=\"cbp-heading-3\">CSS-Grid Code</h3>\n        <CodeSnippet\n          code={`html {\n  box-sizing: border-box;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n\n/* small (mobile) breakpoint you will need to add the number of rows you need */\n.cbp-layout-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-column-gap: 16px;\n  grid-template-rows: 3;\n  margin: 0 20px;\n}\n\n/* put your layout classes for small breakpoint here\nmedium (tablet) breakpoint you will need to add the number of rows you need */\n@media only screen and (min-width: 600px) {\n  .cbp-layout-grid {\n    grid-template-columns: repeat(8, 1fr);\n    grid-column-gap: 28px;\n    grid-template-rows: 3;\n    margin: 0 32px;\n  }\n}\n\n/* put your layout classes for medium breakpoint here\nlarge (tablet/laptop) breakpoint you will need to add the number of rows you need */\n@media only screen and (min-width: 1024px) {\n  .cbp-layout-grid {\n    grid-template-columns: repeat(12, 1fr);\n    grid-column-gap: 28px;\n    grid-template-rows: 3;\n    margin: 0 32px;\n  }\n}\n\n/* put your layout classes for large breakpoint here\nxlarge (desktop) breakpoint you will need to add the number of rows you need */\n@media only screen and (min-width: 1440px) {\n  .cbp-layout-grid {\n    grid-template-columns: repeat(12, 1fr);\n    grid-column-gap: 28px;\n    grid-template-rows: 3;\n    margin: 0 44px;\n  }\n}\n\n/* put your layout classes for xlarge breakpoint here */ `}\n          language=\"language-css\"\n        />\n\n        <h3 className=\"cbp-heading-3\">\n          How to Align Containers to the Layout Grid\n        </h3>\n        <p className=\"cbp-body\">\n          First and foremost in your HTML file, the <code>{`<body>`}</code>\n          element at the top of the page (the parent element to all of the\n          content on the page found under the <code>{`<head>`}</code> element)\n          should have the class <code>.cbplayout-grid</code> assigned to it.\n          This will bring the layout grid onto the page.\n        </p>\n        <p className=\"cbp-body\">\n          Next any \"containers\" should have classes that use the{\" \"}\n          <code>grid-column</code>\n          property to assign the container's width and start/end points. Because\n          CSS Grid only deals in whole integers you'll see an example below\n          where a container has the value (grid-column: 1/5) means the container\n          spans from the beginning of the first column through the end of the\n          4th column (because there is no 0). There are other ways of assigning\n          this but this is the simplest option.\n        </p>\n        <p className=\"cbp-body\">\n          Each product is different and therefore will have differing numbers of\n          rows. Once you determine the number of rows you will need make sure to\n          update the <code>grid-template-rows</code> property with the correct\n          number of rows for that breakpoint. You assign your containers to rows\n          with the <code>grid-row</code> property. Much like with columns you\n          might see this expressed as (grid-row: 1/5) meaning it spans from the\n          beginning of the first row through the end of the 4th row (there is no\n          0).\n        </p>\n        <p className=\"cbp-body\">\n          Alternatively you can use <code>grid-template-areas</code> within each\n          break point to build out your layout. This property allows you to\n          assign each cell in the grid all at once within a break point by using\n          <code>gridareas</code> (names you give each area of the page which you\n          simply reference by name later on).\n        </p>\n\n        <h3 className=\"cbp-heading-3\">Item Width and Complexity</h3>\n        <p className=\"cbp-body\">\n          Setting the width of the elements within a container can be\n          accomplished by either using the column width of the container or\n          specifying it yourself. A good rule of thumb is that the more complex\n          the arrangement of elements within a container is, the more fixed in\n          nature these spatial relationships should be. Simple cards with an\n          image in the top portion and a short amount of text underneath can\n          probably be reliably measured in line with your column width. A more\n          complicated card with many elements that have subordinate elements\n          might have a more difficult time maintaining those spatial\n          relationships in a more fluid type situation. In these more complex\n          arrangements it likely will be better from a layout perspective to set\n          a fixed width or use min-max properties to keep that flexing to a\n          minimum, and simply align the container within the columns rather to\n          them.\n        </p>\n        {/* @TODO: add helper image */}\n\n        <h2 className=\"cbp-heading-2\">\n          When to Break the Grid\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n        <p className=\"cbp-body\">\n          Sometimes to help maintain good \"key lines\" it may be necessary to\n          adjust width on certain components to help align text inside of a\n          component with text that resides outside of it. Key lines are\n          invisible lines that help align elements to each other. A good example\n          would be blocks of text inside the same column that are all aligned\n          left. That invisible line that all three text boxes are aligned to\n          would be referred to as a key line.\n        </p>\n        <p className=\"cbp-body\">\n          Sometimes within a column there might be an example where we have a\n          loose text box placed into the page aligned left to the edge of a\n          column and perhaps an element like a card underneath, also with text\n          contained within. We don't want to disturb the user's eye patterns by\n          breaking this key line and having the text align to the edge of the\n          card instead of the text inside of the card. In this example the card\n          itself would reach slightly into the gutter so that the text can inch\n          over and align to the text presented outside of the card.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">Spacing Methods</h2>\n        <p className=\"cbp-body\">\n          At a layer of complexity higher than the layout grid we find spacing\n          methods. These allow us a more minute control over how to place\n          elements within containers and the spaces between containers.\n        </p>\n\n        <h3 className=\"cbp-heading-3\">Dimension</h3>\n        <p className=\"cbp-body\">\n          This is the height and width of the element. In some layouts simply\n          using the dimensions of the elements is enough to establish a spatial\n          relationship. Remember that the height of an element must be in\n          intervals of 4px to align to the Baseline Grid.\n        </p>\n\n        <h3 className=\"cbp-heading-3\">Padding</h3>\n        <p className=\"cbp-body\">\n          Padding is the space around and between different elements. Spacing\n          variables are preset values that we apply to the padding property.\n          Which variable to use is dependent on both the sizes of the element\n          and its neighbors as well their relationship to each other. For\n          interactive elements please read the \"touch safe targets\" section\n          under the Color and Interactivity section in foundations.\n        </p>\n\n        <h3 className=\"cbp-heading-3\">Alignment</h3>\n        <p className=\"cbp-body\">\n          In this instance we are referring to the placement of elements within\n          a layout container or component. Examples are left, right, and\n          centered and may refer to either an element on its vertical or\n          horizontal axis. For example you have a layout container that spans\n          the whole viewport and you a variety of elements that are on the same\n          row. Centering them on the vertical axis helps establish that these\n          elements have a particular type of relationship to one another.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">\n          Spacing System\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n        <p className=\"cbp-body\">\n          From an atomic perspective, the spacing system provides the blueprint\n          of the interrelationships between different elements on the page.\n          Spacing is not the same as the layout grid. Just as with the\n          typographic system, our paramount concern is legibility. Part of this\n          concept is creating a system of spacing that builds a predictable\n          sense of informational hierarchy. Which pieces of information are\n          subordinate to others, and what information isn't directly related to\n          each other. That's why establishing this rhythm is so important.\n          Having wildly different spacing relationships would create a sort of\n          chaos and make it much more difficult for the end user to distinguish\n          what exactly they are supposed to be taking away from what they're\n          looking at.\n        </p>\n        {/* @TODO: add image of good and bad spacing concepts */}\n\n        <h3 className=\"cbp-heading-3\">\n          Ties to the Baseline Grid and Typographic System\n        </h3>\n        <p className=\"cbp-body\">\n          Since this is a communicative medium, spacing will borrow heavily from\n          the typographic system that was established first. Most notably, the\n          line-height of body copy (20px). This will form the basis that all of\n          the other spacing variables will follow. Why this particular line\n          height? Well body copy is the meat and potatoes when it comes the\n          information on the page. The space that each of these lines of text\n          occupies a sort of bell-weather status indicating the minimum value of\n          an element meant to communicate to a user. It seems like a logical\n          starting point for creating a system.\n        </p>\n        <p className=\"cbp-body\">\n          Vertically speaking, all things align to the baseline grid. Every\n          single element on the page MUST be in an interval of 4px. No 1, 2, 3\n          etc. Because legibility is paramount, where typography goes so too\n          does everything else. Which is why all of a spacing variables must\n          also be a multiple of 4px.\n        </p>\n        {/* @TODO: add image helper */}\n\n        <h3 className=\"cbp-heading-3\">\n          Geometric Progression and Spacing Variables\n        </h3>\n        <p className=\"cbp-body\">\n          Just like how are typographic settings are tabulated with a modular\n          scale you could create a spacing scale based off of a ratio. In this\n          sense above our baseline we double the px in each step, and below we\n          half (rounded to the nearest 4px interval).\n        </p>\n        <p className=\"cbp-body\">\n          Because our system is productive in nature, we need to take a slightly\n          altered approach. If we take the geometric approach on the high end,\n          starting at 20px we will get our large spacing values by doubling at\n          each step. Two large values seem to meet our needs. On the lower end\n          we use the 4px denominator to make variables at 8, 12, and 16px. This\n          should create a system that should work for our needs and create more\n          variety on the smaller side of the scale.\n        </p>\n        <p className=\"cbp-subhead-text\">\n          <em>\n            To view the full list of spacing variables, click on the{\" \"}\n            <a href=\"#Basics\">Basics tab</a> above.\n          </em>\n        </p>\n\n        <h2 className=\"cbp-heading-2\">\n          Rule of 3 \"C's\" (Containers, Components, Content)\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>Containers</strong>\n          </div>\n          These are the highest level in relational hierarchy. These elements\n          hold other elements. For example, cards, drawers, panels, modals, etc.\n          Inset principles are applied here.\n        </p>\n\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>Components</strong>\n          </div>\n          Buttons, form fields, etc. This refers to the spacing inside of these\n          elements. For example the inset space around the text inside of a\n          button.\n        </p>\n\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>Content</strong>\n          </div>\n          Content lives inside of containers. Headers, text, tables, etc. Inline\n          and stack principles are applied here. This is the spacing between\n          elements. IT DOES NOT REPLACE LINE HEIGHT. In the case of spacing\n          between 2 paragraphs within the same text box there needs to be a\n          separate setting to keep that value at 1.5x the line height value\n          (this only applies to body shouldn't have multiple paragraphs within a\n          header.) Another special case is the spacing as applied to list items\n          (unordered or ordered). Body paragraph line height in this case is not\n          usually sufficient and there will likely need to be extra space on the\n          vertical ends to help separate from paragraphs when it is self\n          contained.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">\n          Spacing Philosophies\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>\n              Square Inset (relationship of container to contained elements\n            </strong>\n          </div>\n          This spacing style applies a constant px value around the element.{\" \"}\n          <em>\n            See the <a href=\"#Basics\"> Basics tab </a>above to view the full\n            list of available spacing classes.\n          </em>\n        </p>\n\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>\n              Squish Inset (relationship of container to contained elements)\n            </strong>\n          </div>\n          This style allows for asymmetrical spacing with the vertical spacing\n          being smaller than the horizontal spacing. In the example below the\n          ratio is 2:1.\n          <em>\n            See the <a href=\"#Basics\"> Basics tab </a>above to view the full\n            list of available spacing classes.\n          </em>\n        </p>\n\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>\n              Stretch Inset (relationship of container to contained elements)\n            </strong>\n          </div>\n          Same as with squish except it is the converse of the concept. The\n          vertical value is greater.\n          <em>\n            See the <a href=\"#Basics\"> Basics tab </a>above to view the full\n            list of available spacing classes.\n          </em>\n        </p>\n\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>\n              Stack (vertical relationship between individual elements or\n              between containers)\n            </strong>\n          </div>\n          This refers to the spacing between individual elements in a container\n          or between containers. The values chosen help create hierarchy and\n          vertical rhythm. These classes add spacing only to the bottom of the\n          element via the padding-bottom property.\n          <em>\n            See the <a href=\"#Basics\"> Basics tab </a>above to view the full\n            list of available spacing classes.\n          </em>\n        </p>\n\n        <p className=\"cbp-body\">\n          <div role=\"heading\" aria-level=\"3\">\n            <strong>\n              Inline (horizontal relationship between individual elements or\n              between containers)\n            </strong>\n          </div>\n          This is the same concept as stack except on the horizontal axis.\n          Important concept for understanding responsive design as this assigned\n          or minimum space will dictate when elements will wrap or reflow.\n          <em>\n            See the <a href=\"#Basics\"> Basics tab </a>above to view the full\n            list of available spacing classes.\n          </em>\n        </p>\n\n        <h2 className=\"cbp-heading-2\">\n          Object Size and Spacial Complexity\n          <a\n            href=\"#Basics\"\n            className=\"cbp-heading-6\"\n            style={{ position: \"relative\", float: \"right\", right: \"3rem\" }}\n          >\n            Back to Top <i className=\"fas fa-arrow-up\"></i>\n          </a>{\" \"}\n        </h2>\n        <p className=\"cbp-body\">\n          The larger an object on the page becomes, the more spacing will be\n          required in order to separate it from other objects on the page. Two\n          pairs objects of different sizes with the same spacing between them\n          will optically look different because our eyes interpret that\n          relationship differently. Roughly, the rule is the bigger the object\n          is, the bigger the space it needs between other objects on the page to\n          avoid tangents. Tangents are instances where two objects are so close\n          to each other that they draw the eye in and disrupt layout flow.\n          Sometimes this can be taken advantage of to create a dramatic focal\n          point, but generally it's accidental and is to the detriment of the\n          layout overall.\n        </p>\n\n        <h2 className=\"cbp-heading-2\">Accounting for Borders</h2>\n        <p className=\"cbp-body\">\n          Borders on elements make keeping the grid tidy a bit tricky. They can\n          easily throw off a harmonious rhythm with a death by a thousand 1px\n          cuts. We need to account for them when design components. Buttons, for\n          example, have an 8px padding around the text within them. When they\n          have a border (let's say 1px) that border needs to be reduced to 7px\n          to account for the border so that we dont keep adding 1 off pixels all\n          over the place.\n        </p>\n      </section>\n    </article>\n  </Layout>\n)\n\nexport default LayoutPage\n","module.exports = __webpack_public_path__ + \"static/layout-grid-large-42a9d94c0592180d5a8a5d612ed5f34e.jpg\";","module.exports = __webpack_public_path__ + \"static/layout-spacing-system-95021e5c047dd491de4222f267f1aad5.jpg\";","module.exports = __webpack_public_path__ + \"static/layout-grid-medium-dea5b060c161e9711e695bf255ee0bf5.jpg\";"],"sourceRoot":""}